import type { UtilOptions } from '@/types'
import type { Form } from '@/types/form'
import type { IFFmpegOptions } from '../ffmpeg'

function ffmpegOptionsFromForm(form: Form): IFFmpegOptions {
  return {
    input: form.io.input,
    output: form.io.output,
    container: form.format.container,
    clip: form.format.clip,
    startTime: form.format.startTime ?? undefined,
    stopTime: form.format.stopTime ?? undefined,
    vcodec: form.video.codec,
    preset: form.video.preset,
    bitrate: form.video.bitrate ? form.video.bitrate.toString() : undefined,
    minrate: form.video.minrate ? form.video.minrate.toString() : undefined,
    maxrate: form.video.maxrate ? form.video.maxrate.toString() : undefined,
    bufsize: form.video.bufsize ? form.video.bufsize.toString() : undefined,
    gopsize: form.video.gopsize ? form.video.gopsize.toString() : undefined,
    pixelFormat: form.video.pixel_format,
    frameRate: form.video.frame_rate,
    tune: form.video.tune,
    profile: form.video.profile,
    level: form.video.level,
    aspect: form.video.aspect,
    crf: form.video.crf.toString(),
    pass: form.video.pass,
    faststart: form.video.faststart,
    codecOptions: form.video.codec_options,
    acodec: form.audio.codec,
    sampleRate: form.audio.sampleRate,
    channel: form.audio.channel,
    quality: form.audio.quality,
    audioBitrate: form.audio.bitrate ? form.audio.bitrate.toString() : undefined,
    speed: form.video.speed,
    size: form.video.size,
    width: form.video.width,
    height: form.video.height,
    format: form.video.format,
    scaling: form.video.scaling,
    deband: form.filters.deband,
    deshake: form.filters.deshake,
    deflicker: form.filters.deflicker,
    dejudder: form.filters.dejudder,
    denoise: form.filters.denoise,
    deinterlace: form.filters.deinterlace,
    contrast: form.filters.contrast.toString(),
    brightness: form.filters.brightness.toString(),
    saturation: form.filters.saturation.toString(),
    gamma: form.filters.gamma.toString(),
    volume: form.audio.volume.toString(),
    acontrast: form.filters.acontrast.toString(),
    extra: form.options.extra,
    loglevel: form.options.loglevel,
  }
}

function utilOptionsFromForm(form: Form): UtilOptions {
  return {
    io: {
      input: form.io.input,
      output: form.io.output,
    },
    format: {
      container: form.format.container,
      clip: form.format.clip,
      startTime: form.format.startTime || '',
      stopTime: form.format.stopTime || '',
    },
    video: {
      codec: form.video.codec,
      preset: form.video.preset,
      pass: form.video.pass,
      crf: form.video.crf.toString(),
      bitrate: form.video.bitrate?.toString() || '',
      minrate: form.video.minrate?.toString() || '',
      maxrate: form.video.maxrate?.toString() || '',
      bufsize: form.video.bufsize?.toString() || '',
      gopsize: form.video.gopsize?.toString() || '',
      pixel_format: form.video.pixel_format,
      frame_rate: form.video.frame_rate,
      speed: form.video.speed,
      tune: form.video.tune,
      profile: form.video.profile,
      level: form.video.level,
      faststart: form.video.faststart,
      size: form.video.size,
      width: form.video.width,
      height: form.video.height,
      format: form.video.format,
      aspect: form.video.aspect,
      scaling: form.video.scaling,
      codec_options: form.video.codec_options,
    },
    audio: {
      codec: form.audio.codec,
      channel: form.audio.channel,
      quality: form.audio.quality,
      bitrate: form.audio.bitrate?.toString() || '',
      sampleRate: form.audio.sampleRate,
      volume: form.audio.volume.toString(),
    },
    filters: {
      deband: form.filters.deband,
      deshake: form.filters.deshake,
      deflicker: form.filters.deflicker,
      dejudder: form.filters.dejudder,
      denoise: form.filters.denoise,
      deinterlace: form.filters.deinterlace,
      brightness: form.filters.brightness.toString(),
      contrast: form.filters.contrast.toString(),
      saturation: form.filters.saturation.toString(),
      gamma: form.filters.gamma.toString(),
      acontrast: form.filters.acontrast.toString(),
    },
    options: {
      extra: form.options.extra.join(', '),
      loglevel: form.options.loglevel,
    },
  }
}

export default {
  utilOptionsFromForm,
  ffmpegOptionsFromForm,
}
